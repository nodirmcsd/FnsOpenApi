//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KktService
{
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
        "/1.0")]
    public partial class MessageNotFoundFault
    {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
        "/1.0")]
    public partial class AuthenticationFault
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/1.0", ConfigurationName="KktService.OpenApiAsyncMessageConsumerServicePortType")]
    internal interface OpenApiAsyncMessageConsumerServicePortType
    {
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:GetMessageRequest", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(KktService.MessageNotFoundFault), Action="urn:GetMessageRequest", Name="MessageNotFoundFault", Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0")]
        [System.ServiceModel.FaultContractAttribute(typeof(KktService.AuthenticationFault), Action="urn:GetMessageRequest", Name="AuthenticationFault", Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<KktService.GetMessageResponse> GetMessageAsync(KktService.GetMessageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:SendMessageRequest", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(KktService.AuthenticationFault), Action="urn:SendMessageRequest", Name="AuthenticationFault", Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<KktService.SendMessageResponse> SendMessageAsync(KktService.SendMessageRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
        "/1.0")]
    public enum ProcessingStatuses
    {
        
        /// <remarks/>
        PROCESSING,
        
        /// <remarks/>
        COMPLETED,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMessageRequest", WrapperNamespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
        "/1.0", IsWrapped=true)]
    internal partial class GetMessageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0", Order=0)]
        public string MessageId;
        
        public GetMessageRequest()
        {
        }
        
        public GetMessageRequest(string MessageId)
        {
            this.MessageId = MessageId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMessageResponse", WrapperNamespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
        "/1.0", IsWrapped=true)]
    internal partial class GetMessageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0", Order=0)]
        public KktService.ProcessingStatuses ProcessingStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0", Order=1)]
        public System.Xml.XmlElement Message;
        
        public GetMessageResponse()
        {
        }
        
        public GetMessageResponse(KktService.ProcessingStatuses ProcessingStatus, System.Xml.XmlElement Message)
        {
            this.ProcessingStatus = ProcessingStatus;
            this.Message = Message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendMessageRequest", WrapperNamespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
        "/1.0", IsWrapped=true)]
    internal partial class SendMessageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0", Order=0)]
        public System.Xml.XmlElement Message;
        
        public SendMessageRequest()
        {
        }
        
        public SendMessageRequest(System.Xml.XmlElement Message)
        {
            this.Message = Message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendMessageResponse", WrapperNamespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
        "/1.0", IsWrapped=true)]
    internal partial class SendMessageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiAsyncMessageConsumerService/types" +
            "/1.0", Order=0)]
        public string MessageId;
        
        public SendMessageResponse()
        {
        }
        
        public SendMessageResponse(string MessageId)
        {
            this.MessageId = MessageId;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    internal interface OpenApiAsyncMessageConsumerServicePortTypeChannel : KktService.OpenApiAsyncMessageConsumerServicePortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    internal partial class OpenApiAsyncMessageConsumerServicePortTypeClient : System.ServiceModel.ClientBase<KktService.OpenApiAsyncMessageConsumerServicePortType>, KktService.OpenApiAsyncMessageConsumerServicePortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public OpenApiAsyncMessageConsumerServicePortTypeClient() : 
                base(OpenApiAsyncMessageConsumerServicePortTypeClient.GetDefaultBinding(), OpenApiAsyncMessageConsumerServicePortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.OpenApiAsyncMessageConsumerServiceEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiAsyncMessageConsumerServicePortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(OpenApiAsyncMessageConsumerServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), OpenApiAsyncMessageConsumerServicePortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiAsyncMessageConsumerServicePortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(OpenApiAsyncMessageConsumerServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiAsyncMessageConsumerServicePortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(OpenApiAsyncMessageConsumerServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiAsyncMessageConsumerServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<KktService.GetMessageResponse> GetMessageAsync(KktService.GetMessageRequest request)
        {
            return base.Channel.GetMessageAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<KktService.SendMessageResponse> KktService.OpenApiAsyncMessageConsumerServicePortType.SendMessageAsync(KktService.SendMessageRequest request)
        {
            return base.Channel.SendMessageAsync(request);
        }
        
        public System.Threading.Tasks.Task<KktService.SendMessageResponse> SendMessageAsync(System.Xml.XmlElement Message)
        {
            KktService.SendMessageRequest inValue = new KktService.SendMessageRequest();
            inValue.Message = Message;
            return ((KktService.OpenApiAsyncMessageConsumerServicePortType)(this)).SendMessageAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.OpenApiAsyncMessageConsumerServiceEndpoint))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.OpenApiAsyncMessageConsumerServiceEndpoint))
            {
                return new System.ServiceModel.EndpointAddress("https://openapi.nalog.ru:8090/open-api/ais3/KktService/0.1");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return OpenApiAsyncMessageConsumerServicePortTypeClient.GetBindingForEndpoint(EndpointConfiguration.OpenApiAsyncMessageConsumerServiceEndpoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return OpenApiAsyncMessageConsumerServicePortTypeClient.GetEndpointAddress(EndpointConfiguration.OpenApiAsyncMessageConsumerServiceEndpoint);
        }
        
        public enum EndpointConfiguration
        {
            
            OpenApiAsyncMessageConsumerServiceEndpoint,
        }
    }
}
