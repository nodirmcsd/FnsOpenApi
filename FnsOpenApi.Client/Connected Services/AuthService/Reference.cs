//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AuthService
{
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0")]
    public partial class AuthenticationFault
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/1.0", ConfigurationName="AuthService.OpenApiMessageConsumerServicePortType")]
    internal interface OpenApiMessageConsumerServicePortType
    {
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="urn:GetMessageRequest", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(AuthService.AuthenticationFault), Action="urn:GetMessageRequest", Name="AuthenticationFault", Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<AuthService.GetMessageResponse> GetMessageAsync(AuthService.GetMessageRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMessageRequest", WrapperNamespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0", IsWrapped=true)]
    internal partial class GetMessageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0", Order=0)]
        public System.Xml.XmlElement Message;
        
        public GetMessageRequest()
        {
        }
        
        public GetMessageRequest(System.Xml.XmlElement Message)
        {
            this.Message = Message;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMessageResponse", WrapperNamespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0", IsWrapped=true)]
    internal partial class GetMessageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn://x-artefacts-gnivc-ru/inplat/servin/OpenApiMessageConsumerService/types/1.0", Order=0)]
        public System.Xml.XmlElement Message;
        
        public GetMessageResponse()
        {
        }
        
        public GetMessageResponse(System.Xml.XmlElement Message)
        {
            this.Message = Message;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    internal interface OpenApiMessageConsumerServicePortTypeChannel : AuthService.OpenApiMessageConsumerServicePortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    internal partial class OpenApiMessageConsumerServicePortTypeClient : System.ServiceModel.ClientBase<AuthService.OpenApiMessageConsumerServicePortType>, AuthService.OpenApiMessageConsumerServicePortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public OpenApiMessageConsumerServicePortTypeClient() : 
                base(OpenApiMessageConsumerServicePortTypeClient.GetDefaultBinding(), OpenApiMessageConsumerServicePortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.OpenApiMessageConsumerServiceEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiMessageConsumerServicePortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(OpenApiMessageConsumerServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), OpenApiMessageConsumerServicePortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiMessageConsumerServicePortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(OpenApiMessageConsumerServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiMessageConsumerServicePortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(OpenApiMessageConsumerServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OpenApiMessageConsumerServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<AuthService.GetMessageResponse> GetMessageAsync(AuthService.GetMessageRequest request)
        {
            return base.Channel.GetMessageAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.OpenApiMessageConsumerServiceEndpoint))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.OpenApiMessageConsumerServiceEndpoint))
            {
                return new System.ServiceModel.EndpointAddress("https://openapi.nalog.ru:8090/open-api/AuthService/0.1");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return OpenApiMessageConsumerServicePortTypeClient.GetBindingForEndpoint(EndpointConfiguration.OpenApiMessageConsumerServiceEndpoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return OpenApiMessageConsumerServicePortTypeClient.GetEndpointAddress(EndpointConfiguration.OpenApiMessageConsumerServiceEndpoint);
        }
        
        public enum EndpointConfiguration
        {
            
            OpenApiMessageConsumerServiceEndpoint,
        }
    }
}
